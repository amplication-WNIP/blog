/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteSdfghjkArgs } from "./DeleteSdfghjkArgs";
import { SdfghjkCountArgs } from "./SdfghjkCountArgs";
import { SdfghjkFindManyArgs } from "./SdfghjkFindManyArgs";
import { SdfghjkFindUniqueArgs } from "./SdfghjkFindUniqueArgs";
import { Sdfghjk } from "./Sdfghjk";
import { SdfghjkService } from "../sdfghjk.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sdfghjk)
export class SdfghjkResolverBase {
  constructor(
    protected readonly service: SdfghjkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sdfghjk",
    action: "read",
    possession: "any",
  })
  async _sdfghjksMeta(
    @graphql.Args() args: SdfghjkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sdfghjk])
  @nestAccessControl.UseRoles({
    resource: "Sdfghjk",
    action: "read",
    possession: "any",
  })
  async sdfghjks(
    @graphql.Args() args: SdfghjkFindManyArgs
  ): Promise<Sdfghjk[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sdfghjk, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sdfghjk",
    action: "read",
    possession: "own",
  })
  async sdfghjk(
    @graphql.Args() args: SdfghjkFindUniqueArgs
  ): Promise<Sdfghjk | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sdfghjk)
  @nestAccessControl.UseRoles({
    resource: "Sdfghjk",
    action: "delete",
    possession: "any",
  })
  async deleteSdfghjk(
    @graphql.Args() args: DeleteSdfghjkArgs
  ): Promise<Sdfghjk | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
